{"version":3,"sources":["ts/gameScore.ts","ts/gameTile.ts","ts/gameBoard.ts","ts/gameToken.ts","ts/main.ts"],"names":[],"mappings":"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","file":"main.765d323a.js","sourceRoot":"..\\src","sourcesContent":["export class GameScore extends HTMLElement {\r\n  get score(): number {\r\n    return this._score;\r\n  }\r\n  set score(value: number) {\r\n    this._score = value;\r\n    this.innerHTML = `\r\n      <style>\r\n        game-score {\r\n          contain: content;\r\n          display: grid;\r\n          place-content: center;\r\n        }\r\n      </style>\r\n      <p>Score: ${this._score}</p>\r\n    `;\r\n  }\r\n\r\n  private _score: number = 0;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.score = 0;\r\n  }\r\n}\r\n","export class GameTile extends HTMLElement {\r\n  x!: number;\r\n  y!: number;\r\n\r\n  connectedCallback() {\r\n    this.innerHTML = `\r\n    <style>\r\n    game-tile {\r\n      display: grid;\r\n      grid-auto-flow: row;\r\n      place-content: center;\r\n    }\r\n    </style>\r\n    `;\r\n    let xString = this.getAttribute('x') ?? '';\r\n    this.x = parseInt(xString);\r\n\r\n    let yString = this.getAttribute('y') ?? '';\r\n    this.y = parseInt(yString);\r\n  }\r\n}\r\n","import {GameTile} from \"./gameTile\";\r\n\r\nexport class GameBoard extends HTMLElement {\r\n  rows: number;\r\n  columns: number;\r\n  board: GameTile[] = [];\r\n\r\n  static get observedAttributes() {\r\n    return ['rows', 'columns'];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    const rowsAttribute = this.getAttribute('rows') ?? '4';\r\n    this.rows = parseInt(rowsAttribute);\r\n    const columnsAttribute = this.getAttribute('columns') ?? '4';\r\n    this.columns = parseInt(columnsAttribute);\r\n  }\r\n\r\n  private createBoard() {\r\n    const template = document.createElement('template');\r\n\r\n    template.innerHTML = `\r\n      <style>\r\n        game-board {\r\n          display: grid;\r\n          grid-template-columns: repeat(${this.columns}, 1fr);\r\n          contain: content;\r\n        }\r\n      </style>`;\r\n    this.replaceChildren(template.content);\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.columns; x++) {\r\n        const gameTile = document.createElement('game-tile') as GameTile;\r\n        gameTile.setAttribute('x', x.toString());\r\n        gameTile.setAttribute('y', y.toString());\r\n\r\n        this.appendChild(gameTile);\r\n        this.board.push(gameTile)\r\n      }\r\n    }\r\n  }\r\n\r\n  connectedCallback() {\r\n    // console.log(\"game-board connected\")\r\n  }\r\n\r\n  attributeChangedCallback() {\r\n    const rowsAttribute = this.getAttribute('rows') ?? '4';\r\n    this.rows = parseInt(rowsAttribute);\r\n    const columnsAttribute = this.getAttribute('columns') ?? '4';\r\n    this.columns = parseInt(columnsAttribute);\r\n    // console.log('attributes changed')\r\n    this.createBoard();\r\n  }\r\n}\r\n","export class GameToken extends HTMLElement {\r\n  value: number = 2;\r\n  id!: string;\r\n  private oldOffsetTop!: number;\r\n  private oldOffsetLeft!: number;\r\n\r\n  connectedCallback() {\r\n    this.id = (this.id === '') ? \"id\" + Math.random().toString(16).slice(2, 10) : this.id;\r\n    this.setAttribute('id', this.id);\r\n\r\n    this.oldOffsetLeft = this.oldOffsetLeft ?? this.offsetLeft;\r\n    this.oldOffsetTop = this.oldOffsetTop ?? this.offsetTop;\r\n\r\n    this.innerHTML = `\r\n    <style>\r\n      game-token {\r\n        display: grid;\r\n        place-content: center;\r\n        place-items: center;\r\n        contain: content;\r\n        position: relative;\r\n      }\r\n\r\n      game-token#${this.id} {\r\n        animation: slide${this.id} 100ms ease-in-out;\r\n      }\r\n\r\n      @keyframes slide${this.id} {\r\n        from{\r\n            left: ${this.oldOffsetLeft - this.offsetLeft}px;\r\n            top: ${this.oldOffsetTop - this.offsetTop}px;\r\n        }\r\n        to {\r\n            left: 0;\r\n            top: 0;\r\n        }\r\n      }\r\n    </style>\r\n    <p>${this.value}</p>\r\n    `\r\n\r\n    // console.info(`Token was at ${this.oldOffsetLeft}px / ${this.oldOffsetTop}px`)\r\n    // console.info(`Connecting Token at ${this.offsetLeft}px / ${this.offsetTop}px`)\r\n    this.oldOffsetTop = this.offsetTop;\r\n    this.oldOffsetLeft = this.offsetLeft;\r\n  }\r\n}\r\n","import {GameScore} from \"./gameScore\";\r\nimport {GameTile} from \"./gameTile\";\r\nimport {GameBoard} from \"./gameBoard\";\r\nimport {GameToken} from \"./gameToken\";\r\n\r\nconst customGameElements = {\r\n  'game-board': GameBoard,\r\n  'game-token': GameToken,\r\n  'game-tile': GameTile,\r\n  'game-score': GameScore,\r\n};\r\n\r\ntype DirectionKey = \"ArrowLeft\" | \"ArrowRight\" | \"ArrowDown\" | \"ArrowUp\";\r\ntype Direction = \"up\" | \"down\" | \"left\" | \"right\";\r\ntype Axis = \"x\" | \"y\";\r\ntype AxisInfo = { cross: Axis; main: Axis; reversed: boolean, length: 'columns' | 'rows' };\r\n\r\nconst axes: {\r\n  [key in Direction]:AxisInfo;\r\n} = {\r\n  up: {main: 'x', cross: 'y', reversed: false, length: 'columns'},\r\n  down: {main: 'x', cross: 'y', reversed: true, length: 'columns'},\r\n  left: {main: 'y', cross: 'x', reversed: false, length: 'rows'},\r\n  right: {main: 'y', cross: 'x', reversed: true, length: 'rows'},\r\n}\r\n\r\nconst keyDirection: {\r\n  [key in DirectionKey]: Direction;\r\n} = {\r\n  \"ArrowLeft\": \"left\",\r\n  \"ArrowRight\": \"right\",\r\n  \"ArrowDown\": \"down\",\r\n  \"ArrowUp\": \"up\"\r\n}\r\nObject.entries(customGameElements).forEach(([element, className]) => {\r\n  console.info(`Registering <${element}>`)\r\n\r\n  customElements.define(element, className);\r\n\r\n});\r\n\r\nconst board = document.getElementsByTagName('game-board')[0] as GameBoard;\r\nconst score = document.getElementsByTagName('game-score')[0] as GameScore;\r\nconst tiles: GameTile[] = Array.from(board.querySelectorAll('game-tile'));\r\n\r\nconsole.log(\"Starting game.\")\r\n\r\nwindow.addEventListener('keydown', handleKey)\r\n\r\nfunction handleKey(event: KeyboardEvent) {\r\n  if (!Object.keys(keyDirection).includes(event.key)) return;\r\n\r\n  const direction = keyDirection[event.key as DirectionKey];\r\n  slideTokens(direction)\r\n  placeRandomToken();\r\n}\r\n\r\nfunction sortTilesIntoLanes(tiles: GameTile[], axisInfo:AxisInfo) {\r\n  const laneAxis: Axis = axisInfo.main;\r\n  return tiles.reduce((lanes: GameTile[][], tile) => {\r\n    const lane = tile[laneAxis];\r\n    if (lanes.hasOwnProperty(lane) && axisInfo.reversed) {\r\n      lanes[lane].unshift(tile);\r\n    } else if (lanes.hasOwnProperty(lane)) {\r\n      lanes[lane].push(tile);\r\n    } else {\r\n      lanes[lane] = [tile]\r\n    }\r\n    return lanes;\r\n  }, []);\r\n}\r\n\r\nfunction slideTokens(direction: Direction) {\r\n  const axisInfo = axes[direction];\r\n  let lanes: GameTile[][] = sortTilesIntoLanes(tiles, axisInfo)\r\n\r\n  lanes.forEach((lane) => {\r\n    let tokenMerged = false;\r\n    lane.forEach((tile, index) => {\r\n      const token = tile.querySelector('game-token') as GameToken;\r\n      if (!token) return;\r\n      slideSingleToken(index, lane, token, tokenMerged);\r\n    });\r\n  })\r\n}\r\n\r\nfunction slideSingleToken(index: number, lane: GameTile[], token: GameToken, tokenMerged: boolean) {\r\n  while (index > 0) {\r\n    index--;\r\n    const tileToCheck = lane[index];\r\n    const otherToken = tileToCheck.querySelector('game-token') as GameToken;\r\n    if (token.value === otherToken?.value && !tokenMerged) {\r\n      mergeOnNextTile(token, otherToken);\r\n      tokenMerged = true;\r\n      return;\r\n    } else if (otherToken) {\r\n      leaveOnCurrentTile(lane, index, token);\r\n      tokenMerged = false;\r\n      return;\r\n    }\r\n  }\r\n  leaveOnLastTile(lane, token);\r\n}\r\n\r\nfunction mergeOnNextTile(token: GameToken, otherToken: GameToken) {\r\n  token.value *= 2;\r\n  score.score = score.score + token.value;\r\n  otherToken.replaceWith(token);\r\n}\r\n\r\nfunction leaveOnCurrentTile(lane: GameTile[], searchIndex: number, token: GameToken) {\r\n  const previousTile = lane[searchIndex + 1];\r\n  previousTile.appendChild(token)\r\n}\r\n\r\nfunction leaveOnLastTile(lane: GameTile[], token: GameToken) {\r\n  lane[0].appendChild(token)\r\n}\r\n\r\nfunction getEmptyTiles(tiles: GameTile[]) {\r\n  return tiles\r\n    .filter(tile => Array.from(tile.children)\r\n      .every(child => !(child instanceof GameToken)));\r\n}\r\n\r\nfunction placeRandomToken() {\r\n  const emptyTiles = getEmptyTiles(tiles);\r\n  if (emptyTiles.length === 0) {\r\n    console.log(\"YOU LOST.\");\r\n    return;\r\n  }\r\n  let randomIndex = Math.floor(Math.random() * emptyTiles.length);\r\n  const token = document.createElement('game-token');\r\n  emptyTiles[randomIndex].appendChild(token);\r\n}\r\n\r\nplaceRandomToken();\r\n"]}